<?php

namespace app\common\model\admin;

use filehelper\FileHelper;
use helper\Helper;
use think\Model;

class AdminModel extends Model
{
    protected $name = "admin";
    protected $autoWriteTimestamp = true;
    protected $hidden = ['password', 'salt'];

    protected function getStatusTextAttr($val, $data){
        $status = $data['status'];
        $texts = [1=>'正常', 4=>'已禁用'];
        return $texts[$status];
    }

    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        self::event("before_update", function($model){
            if(isset($model->ad_id) && isset($model->avatar)){
                AdminModel::rmAvatarByid($model->ad_id);
            }
        });
        self::event("before_delete", function($model){
            if(isset($model->ad_id)){
                AdminModel::rmAvatarByid($model->ad_id);
            }
        });
    }

    /**
     * 生成管理员密码
     * @param string $password 密码明文
     * @param string $salt 加密盐
     * @return string
     */
    public static function makePassword($password, $salt){
        return md5(md5($password).$salt);
    }

    /**
     * 根据提交信息创建或更新管理员信息
     * @param int $ad_id 管理员ID，为0时表示插入管理员，大于0时表示更新管理员
     * @param array $input 输入数据
     * @return object
     */
    public static function createOrUpdate($ad_id, $input){
        $group_ids = []; //管理员角色ID集合
        if(isset($input['group_ids'])){
            $group_ids = $input['group_ids'];
            unset($input['group_ids']);
        }

        if($ad_id === 0){ //插入管理员
            if(isset($input['ad_id'])) unset($input['ad_id']);
            $salt = Helper::random(6);
            $input['password'] = AdminModel::makePassword($input['password'], $salt);
            $input['salt'] = $salt;
            $result = AdminModel::create($input);
        }else{ //更新管理员
            $input["ad_id"] = $ad_id;
            //校验密码
            if(!empty($input['password'])){
                $salt = AdminModel::where("ad_id", $ad_id)->value("salt");
                $input['password'] = AdminModel::makePassword($input['password'], $salt);
            }
            else{
                unset($input['password']);
            }
            $result = AdminModel::update($input);
        }
        if($result){
            //保存管理员角色
            AdminAuthGroupAccessModel::saveGroupIds($result['ad_id'], $group_ids);
        }
        return $result;
    }

    /**
     * 根据管理员ID删除用户头像
     * @param int $id 管理员ID
     */
    public static function rmAvatarByid($id){
        $vo = AdminModel::field("avatar")->find($id);
        if($vo && $vo['avatar']){
            FileHelper::helper()->unlink($vo['avatar']);
        }
    }

    //获取用户默认头像
    public static function getDefaultAvatar(){
        return DEFAULT_AVATAR;
    }

    /**
     * 根据管理员ID获取登录用户信息
     * @param int $ad_id
     * @return object
     */
    public static function getLoginUser($ad_id){
        $admin = AdminModel::get($ad_id);
        if($admin['avatar'] === ''){
            $admin['avatar'] = AdminModel::getDefaultAvatar();
        }
        else{
            $admin['avatar'] = FileHelper::helper()->getWebsitePath($admin['avatar']);
        }
        if($admin['ad_name'] === ''){
            $admin['ad_name'] = $admin['ad_account'];
        }
        return $admin;
    }

    /**
     * 获取当前登录的管理员ID
     */
    public static function getLogignAdId(){
        return (int)session("ad_id");
    }

    /**
     * 获取管理员角色ID集合
     */
    public static function getGroupIds($ad_id){
        $group_ids = AdminAuthGroupAccessModel::where("ad_id", $ad_id)->column('group_id');
        if(empty($group_ids)){
            return [];
        }
        return $group_ids;
    }

    /**
     * 获取管理员的角色名字集合
     */
    public static function getGroupNames($ad_id){
        $group_names = AdminAuthGroupAccessModel::alias('ga')
            ->join("admin_role r", "r.group_id = ga.group_id", "left")
            ->where("ga.ad_id", $ad_id)
            ->column("r.title");
        if(empty($group_names)){
            return [];
        }
        return $group_names;
    }

    /**
     * 获取管理员关联角色的规则ID的集合
     */
    public static function getGroupRuleIds($ad_id){
        $rule_list = AdminAuthGroupAccessModel::alias('ga')
            ->join("admin_role r", "r.group_id = ga.group_id", "left")
            ->where("ga.ad_id", $ad_id)
            ->column("r.rule_ids");
        if(empty($rule_list)){
            return [];
        }
        $rule_ids = [];
        foreach ($rule_list as $ids){
            $ids = explode(',', $ids);
            foreach ($ids as $id){
                if((int)$id > 0){
                    $rule_ids[] = (int)$id;
                }
            }
        }
        $rule_ids = array_flip(array_flip($rule_ids));
        return $rule_ids;
    }

    /**
     * 获取管理员角色的菜单列表
     */
    public static function getMenuList($ad_id){
        $model = new AdminAuthRuleModel();
        if($ad_id !== 1){
            $rule_ids = AdminModel::getGroupRuleIds($ad_id);
            if(empty($rule_ids)){
                return [];
            }
            $model->where("rule_id", "in", $rule_ids);
        }
        $list = $model->where("status = 1 and show_menu = 1") ->select();
        $list = collection($list)->toArray();
        $list = list_to_tree($list, 'rule_id', 'parent_id', 'child');
        foreach ($list as $k=>$v){
            if(isset($v['child'])){
                $v['check_child'] = true;
            }
            else{
                $v['check_child'] = false;
            }
            $list[$k] = $v;
        }
        return $list;
    }
}
